#!/bin/sh
[ "$ACTION" = "del" ] && exit 0

. /lib/functions.sh
config_load newdevnotify
config_get start_timeout_sec main start_timeout_sec '30'
config_get enabled     main enabled 1
config_get db_path     main db_path ''
config_get main_label  main main_label 'Основная сеть'
config_get guest_label main guest_label 'Гостевая сеть'
config_get template main template 'Подключено новое устройство'

[ "$enabled" = "1" ] || exit 0

# ждем пока система не поднимется (по умолчанию 30 сек)
UPTIME="$(cut -d. -f1 /proc/uptime 2>/dev/null)"
if [ -n "$UPTIME" ] && [ "$UPTIME" -lt "$start_timeout_sec" ]; then
    sleep $(( start_timeout_sec - UPTIME ))
fi

HOST="${HOSTNAME:-"-"}"
IP="${IPADDR:-"-"}"
MAC="$(echo "${MACADDR:-"-"}" | tr 'a-f' 'A-F')"
DATE="$(date '+%Y-%m-%d %H:%M:%S')"

IFACE="${INTERFACE:-$DEVICE}"
if [ -z "$IFACE" ] && [ -n "$IPADDR" ]; then
  IFACE="$(ip -o route get "$IPADDR" 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i=="dev") {print $(i+1); exit}}')"
fi
[ -z "$IFACE" ] && IFACE="-"

case "$IFACE" in
  br-lan|lan|lan*)           NETNAME="$main_label" ;;
  br-guest|guest*|wlan*-1)   NETNAME="$guest_label" ;;
  *)                         NETNAME="$IFACE" ;;
esac

[ -f "$db_path" ] || touch "$db_path"

logger -t newdevnotify-trace "DHCP: $NETNAME MAC=$MAC HOST=$HOST IP=$IP"

DEDUPE_KEY="$IFACE|MAC:$MAC"
if ! grep -qi "^${DEDUPE_KEY}\$" "$db_path"; then
  # формируем сообщение по шаблону
  MSG="$template"
  MSG="${MSG//\$NETNAME/$NETNAME}"
  MSG="${MSG//\$DATE/$DATE}"
  MSG="${MSG//\$HOST/$HOST}"
  MSG="${MSG//\$MAC/$MAC}"
  MSG="${MSG//\$IP/$IP}"

  MSG=$(echo -e "$MSG")

  logger -t newdevnotify "NEW: $NETNAME MAC=$MAC HOST=$HOST IP=$IP"
  /usr/bin/newdevnotify_send.sh "$MSG"
  echo "$DEDUPE_KEY" >> "$db_path"
else
  logger -t newdevnotify "KNOWN: $NETNAME MAC=$MAC HOST=$HOST IP=$IP"
fi
